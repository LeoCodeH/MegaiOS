@testable import MEGA
import MEGAAnalyticsiOS
import MEGAAppPresentation
import MEGAAppPresentationMock
import MEGASDKRepoMock
import XCTest

final class AudioPlaylistViewModelTests: XCTestCase {
    let router = MockAudioPlaylistViewRouter()
    let playerHandler = MockAudioPlayerHandler()
    
    private var anyAudioNode: MockNode {
        MockNode(handle: 1, name: "first-audio.mp3", nodeType: .file)
    }
    
    @MainActor
    lazy var viewModel = AudioPlaylistViewModel(
        configEntity: AudioPlayerConfigEntity(parentNode: MEGANode(), playerHandler: playerHandler),
        router: router,
        tracker: MockTracker()
    )
    
    @MainActor func testAudioPlayerActions() throws {
        let mockPlayerCurrentItem = AudioPlayerItem.mockItem
        playerHandler.mockPlayerCurrentItem = mockPlayerCurrentItem
        test(
            viewModel: viewModel,
            action: .onViewDidLoad,
            expectedCommands: [.reloadTracks(currentItem: mockPlayerCurrentItem, queue: nil, selectedIndexPaths: []), .title(title: "")]
        )
        
        XCTAssertEqual(playerHandler.addPlayerListener_calledTimes, 1)
        
        test(viewModel: viewModel, action: .move(mockPlayerCurrentItem, IndexPath(row: 1, section: 0), MovementDirection.up), expectedCommands: [])
        XCTAssertEqual(playerHandler.onMoveItem_calledTimes, 1)
        
        test(viewModel: viewModel, action: .didSelect(mockPlayerCurrentItem), expectedCommands: [.showToolbar])
        
        test(viewModel: viewModel, action: .removeSelectedItems, expectedCommands: [.deselectAll, .hideToolbar])
        XCTAssertEqual(playerHandler.onDeleteItems_calledTimes, 1)
        
        test(viewModel: viewModel, action: .didDeselect(mockPlayerCurrentItem), expectedCommands: [.hideToolbar])
        
        test(viewModel: viewModel, action: .onViewWillDisappear, expectedCommands: [])
        XCTAssertEqual(playerHandler.removePlayerListener_calledTimes, 1)
        
        test(viewModel: viewModel, action: .willDraggBegin, expectedCommands: [])
        let file1URL = try XCTUnwrap(Bundle.main.url(forResource: "incoming_voice_video_call_iOS9", withExtension: "mp3"))
        let track1 = AudioPlayerItem(name: "file 1", url: file1URL, node: nil)
        viewModel.audio(player: AVQueuePlayer(), reload: track1)
        test(viewModel: viewModel, action: .didDraggEnd, expectedCommands: [.reload(items: [track1])])
    }
    
    @MainActor func testRouterActions() {
        test(viewModel: viewModel, action: .dismiss, expectedCommands: [])
        XCTAssertEqual(router.dismiss_calledTimes, 1)
    }
    
    // MARK: - Analytics Tests
    
    @MainActor
    func testAnalytics_onMove_tracksReorderEvent() {
        let tracker = MockTracker()
        let configEntity = audioPlayerConfigEntity(node: anyAudioNode)
        let (sut, trackerOut) = makeSUT(
            configEntity: configEntity,
            tracker: tracker
        )
        
        let movedItem = AudioPlayerItem.mockItem
        let indexPath = IndexPath(row: 1, section: 0)
        sut.dispatch(.move(movedItem, indexPath, .up))
        
        assertTrackAnalyticsEventCalled(
            trackedEventIdentifiers: trackerOut.trackedEventIdentifiers,
            with: [AudioPlayerQueueReorderedEvent()]
        )
    }
    
    private func compareAudioPlayerItem(_ item: AudioPlayerItem, _ other: AudioPlayerItem) -> Bool {
        guard let handle = item.node?.handle, let otherHandle = other.node?.handle else {
            return item.url == other.url
        }
        return handle == otherHandle
    }
    
    @MainActor
    private func makeSUT(
        configEntity: AudioPlayerConfigEntity,
        tracker: some AnalyticsTracking = MockTracker()
    ) -> (sut: AudioPlaylistViewModel, tracker: MockTracker) {
        let router = MockAudioPlaylistViewRouter()
        let sut = AudioPlaylistViewModel(configEntity: configEntity, router: router, tracker: tracker)
        trackForMemoryLeaks(on: sut, timeoutNanoseconds: 1_000_000_000, file: #filePath, line: #line)
        return (sut, tracker as! MockTracker)
    }
    
    private func audioPlayerConfigEntity(node: MockNode, isFolderLink: Bool = false, fileLink: String? = nil) -> AudioPlayerConfigEntity {
        let playerHandler = MockAudioPlayerHandler()
        return AudioPlayerConfigEntity(
            node: node,
            isFolderLink: isFolderLink,
            fileLink: fileLink,
            playerHandler: playerHandler
        )
    }
}
